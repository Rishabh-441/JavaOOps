Interfaces: Just requirement specification

1. Every method present inside interface is public and abstract.
2. Even if we are declaring it "public" and "abstract" or not, it's by default public and abstract.

eg.

package class12Interface;
public interface Interf {
    public void m1();
    public void m2();
}
_________________________________________

3. At time of declaring (overriding) the abstract method of the interface, we need to declare it as "public".
4. Wile overriding, we can't reduce the scope of any method of the parent class.
5. Child class of the interface has to provide implementation of all the abstract methods of interface, or the child class must be itself "abstract".

eg.
package class12Interface;
public class ServiceProvider implements Interf{
    public void m1() {

    }

    @Override
    public void m2() {

    }
}

eg.
package class12Interface;

public abstract class ServiceProvider implements Interf{
    //at time of declaring (overriding) the abstract method of the interface, we need to declare it as "public".
    public void m1() {

    }
}

class SubServiceProvider extends ServiceProvider {
    @Override
    public void m2() {
        System.out.println("implementing m2() in SubServiceProvider class");
    }
}

___________________________________________________

You can provide implementation in interfaces in Java using default methods, static methods, and private methods.

Default methods are used to provide default implementation for the methods that are declared in an interface. They were introduced in Java 8 and are denoted by the default keyword. Here is an example:

public interface Vehicle {
    default void start() {
        System.out.println("The vehicle is starting");
    }
}

Static methods are used to provide utility methods that can be called directly on the interface without creating an instance of the class implementing the interface. They were also introduced in Java 8 and are denoted by the static keyword. Here is an example:

public interface Vehicle {
    static void printType() {
        System.out.println("This is a vehicle");
    }
}

Private methods are used to provide private implementation for the methods that are declared in an interface. They were introduced in Java 9 and are denoted by the private keyword. Here is an example:

public interface Vehicle {
    private void printPrivate() {
        System.out.println("This is a private method");
    }
}

You can also define private static methods in an interface, which are used to provide private static utility methods that can be called directly on the interface without creating an instance of the class implementing the interface. Here is an example:

public interface Vehicle {
    private static void printPrivateStatic() {
        System.out.println("This is a private static method");
    }
}

